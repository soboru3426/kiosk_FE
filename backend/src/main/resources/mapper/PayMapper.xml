<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.kiosk.pay.PayMapper">

    <!-- 전체 결제 내역 -->
    <select id="findAllPays" resultType="com.example.kiosk.pay.PayDTO">
        SELECT 
            p.payment_id AS paymentId,
            p.payment_method AS paymentMethod,
            pr.product_name AS productName,
            p.final_amount AS finalAmount,
            p.payment_date AS paymentDate,  
            b.branch_name AS branchName,
            p.serial_number AS serialNumber,
            p.sub_items_json AS subItemsJson
        FROM 
            payment p
        JOIN 
            product pr ON p.product_id = pr.product_id
        JOIN 
            branch b ON p.branch_id = b.branch_id
    </select>

    <!-- 단일 지점 -->
    <select id="findByBranchId" parameterType="java.lang.Integer" resultType="com.example.kiosk.pay.PayDTO">
        SELECT 
            p.payment_id AS paymentId,
            p.payment_method AS paymentMethod,
            pr.product_name AS productName,
            p.final_amount AS finalAmount,
            p.payment_date AS paymentDate,
            b.branch_name AS branchName,
            p.serial_number AS serialNumber,
            p.sub_items_json AS subItemsJson
        FROM 
            payment p
        JOIN 
            product pr ON p.product_id = pr.product_id
        JOIN 
            branch b ON p.branch_id = b.branch_id
        WHERE 
            p.branch_id = #{branchId}
    </select>

    <!-- 다중 지점 -->
    <select id="findByBranchIds" parameterType="list" resultType="com.example.kiosk.pay.PayDTO">
        SELECT 
            p.payment_id AS paymentId,
            p.payment_method AS paymentMethod,
            pr.product_name AS productName,
            p.final_amount AS finalAmount,
            p.payment_date AS paymentDate,
            b.branch_name AS branchName,
            p.serial_number AS serialNumber,
            p.sub_items_json AS subItemsJson
        FROM    
            payment p
        JOIN 
            product pr ON p.product_id = pr.product_id
        JOIN 
            branch b ON p.branch_id = b.branch_id
        WHERE 
            p.branch_id IN
        <foreach item="id" collection="branchIds" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>

    <!-- 단건 조회 -->
    <select id="findById" parameterType="java.lang.Integer" resultType="com.example.kiosk.pay.PayDTO">
        SELECT
            p.payment_id AS paymentId,
            p.payment_method AS paymentMethod,
            pr.product_name AS productName,
            p.final_amount AS finalAmount,
            p.payment_date AS paymentDate,
            b.branch_name AS branchName,
            p.serial_number AS serialNumber,
            p.sub_items_json AS subItemsJson
        FROM
            payment p
        JOIN
            product pr ON p.product_id = pr.product_id
        JOIN
            branch b ON p.branch_id = b.branch_id
        WHERE
            p.payment_id = #{id}
    </select>

    <!-- 삽입 -->
    <insert id="insertPayment" parameterType="com.example.kiosk.pay.Pay">
        INSERT INTO payment 
            (product_id, branch_id, quantity, final_amount, payment_method, serial_number, payment_date, sub_items_json)
        VALUES 
            (#{product.productId}, #{branch.branchId}, #{quantity}, #{finalAmount}, #{paymentMethod}, #{serialNumber}, #{paymentDate}, #{subItemsJson})
    </insert>

    <!-- 필터링 조회 -->
    <select id="getFilteredPayments" parameterType="map" resultType="com.example.kiosk.pay.PayDTO">
        SELECT
            p.payment_id AS paymentId,
            p.payment_method AS paymentMethod,
            pr.product_name AS productName,
            p.final_amount AS finalAmount,
            p.payment_date AS paymentDate,
            b.branch_name AS branchName,
            p.serial_number AS serialNumber,
            p.sub_items_json AS subItemsJson
        FROM
            payment p
        JOIN
            product pr ON p.product_id = pr.product_id
        JOIN
            branch b ON p.branch_id = b.branch_id
        <where>
            <if test="ids != null and ids.size() > 0">
                p.branch_id IN 
                <foreach item="id" collection="ids" open="(" separator="," close=")">
                    #{id}
                </foreach>
            </if>
            <if test="from != null and to != null">
                AND p.payment_date BETWEEN #{from, jdbcType=TIMESTAMP} AND #{to, jdbcType=TIMESTAMP}
            </if>
        </where>
        ORDER BY
            p.payment_date DESC
    </select>

    <!-- 단일 지점 + 날짜 필터 -->
    <select id="findByBranchIdAndPayDateBetween" parameterType="map" resultType="com.example.kiosk.pay.PayDTO">
        SELECT
            p.payment_id AS paymentId,
            p.payment_method AS paymentMethod,
            pr.product_name AS productName,
            p.final_amount AS finalAmount,
            p.payment_date AS paymentDate,
            b.branch_name AS branchName,
            p.serial_number AS serialNumber,
            p.sub_items_json AS subItemsJson
        FROM
            payment p
        JOIN
            product pr ON p.product_id = pr.product_id
        JOIN
            branch b ON p.branch_id = b.branch_id
        WHERE
            p.branch_id = #{branchId}
            AND p.payment_date BETWEEN #{start} AND #{end}
    </select>

</mapper>
