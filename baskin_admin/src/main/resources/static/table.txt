CREATE TABLE branch (
    branch_id INT AUTO_INCREMENT PRIMARY KEY,
    branch_name VARCHAR(100) NOT NULL,
    location VARCHAR(200) NOT NULL
);

CREATE TABLE menu (
    menu_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    price INT NOT NULL CHECK (price >= 0),
    description TEXT,
    category ENUM('Main', 'Side', 'Drink', 'DESSERT') NOT NULL,
    image VARCHAR(255)
);

CREATE TABLE payment (
    payment_id INT AUTO_INCREMENT PRIMARY KEY,
    serial_number VARCHAR(20) UNIQUE NOT NULL,  -- 일련번호 추가
    menu_id INT NOT NULL,
    branch_id INT NOT NULL,
    quantity INT NOT NULL CHECK (quantity > 0),
    total_price INT NOT NULL,
    payment_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (menu_id) REFERENCES menu(menu_id) ON DELETE CASCADE,
    FOREIGN KEY (branch_id) REFERENCES branch(branch_id) ON DELETE CASCADE
);

CREATE TABLE stock (
    stock_id INT AUTO_INCREMENT PRIMARY KEY,
    branch_id INT NOT NULL,
    menu_id INT NOT NULL,
    quantity INT NOT NULL CHECK (quantity >= 0),
    FOREIGN KEY (branch_id) REFERENCES branch(branch_id) ON DELETE CASCADE,
    FOREIGN KEY (menu_id) REFERENCES menu(menu_id) ON DELETE CASCADE
);

CREATE TABLE notification (
    notification_id INT AUTO_INCREMENT PRIMARY KEY,
    payment_id INT NOT NULL,
    phone_number VARCHAR(15) NOT NULL,
    message_content TEXT NOT NULL,
    status ENUM('확인중', '배송중', '배송완료') DEFAULT '확인중',
    sent_time DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (payment_id) REFERENCES payment(payment_id) ON DELETE CASCADE
);


CREATE TABLE user (
    user_id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,  -- 비밀번호는 String 타입으로 수정
    role ENUM('admin', 'branch') NOT NULL,  -- 'admin' 또는 'branch'만 가능
    branch_id INT NULL,  -- 지점 계정일 경우 해당 지점의 ID (어드민은 NULL)
    FOREIGN KEY (branch_id) REFERENCES branch(branch_id) ON DELETE CASCADE
);


INSERT INTO branch (branch_name, location) 
VALUES 
    ('강서지점', 'Seoul, Gangseo-gu'),
    ('상봉지점', 'Seoul, Jungnang-gu'),
    ('하남지점', 'Gyeonggi-do, Hanam-si');


-- 어드민 계정 추가 (branch_id 없음)
INSERT INTO user (username, password, role, branch_id) 
VALUES ('admin', 1234, 'admin', NULL);

-- 강서점 매니저 계정
INSERT INTO user (username, password, role, branch_id) 
VALUES ('gangseo_manager', 1234, 'branch', 1);

-- 상봉점 매니저 계정
INSERT INTO user (username, password, role, branch_id) 
VALUES ('sangbong_manager', 5678, 'branch', 2);

-- 하남점 매니저 계정
INSERT INTO user (username, password, role, branch_id) 
VALUES ('hanam_manager', 9876, 'branch', 3);


-- payment 테이블의 total_price 자동 계산 가능
DELIMITER //

CREATE TRIGGER calculate_total_price
BEFORE INSERT ON payment
FOR EACH ROW
BEGIN
    DECLARE menu_price INT;
    SELECT price INTO menu_price FROM menu WHERE menu_id = NEW.menu_id;
    SET NEW.total_price = NEW.quantity * menu_price;
END;
//

DELIMITER ;

INSERT INTO menu (name, price, description, category, image) 
VALUES 
    ('초코 아이스크림', 5000, '달콤한 초콜릿 맛 아이스크림', 'DESSERT', 'choco.jpg'),
    ('바닐라 아이스크림', 4500, '부드러운 바닐라 아이스크림', 'DESSERT', 'vanilla.jpg'),
    ('딸기 아이스크림', 4800, '상큼한 딸기 아이스크림', 'DESSERT', 'strawberry.jpg');


INSERT INTO stock (branch_id, menu_id, quantity, status, order_status) 
VALUES 
    (1, 1, 10, '판매중', '확인중'),  -- 강서점에 초코 아이스크림 10개, 상품 상태: 판매중, 발주 상태: 확인중
    (1, 2, 5, '판매중', '확인중'),   -- 강서점에 바닐라 아이스크림 5개, 상품 상태: 판매중, 발주 상태: 확인중
    (2, 1, 3, '판매중', '배송중'),   -- 상봉점에 초코 아이스크림 3개, 상품 상태: 판매중, 발주 상태: 배송중
    (2, 3, 7, '판매중', '배송중'),   -- 상봉점에 딸기 아이스크림 7개, 상품 상태: 판매중, 발주 상태: 배송중
    (3, 2, 0, '판매중단', '확인중'),   -- 하남점에 바닐라 아이스크림 0개 (재고 없음), 상품 상태: 판매중단, 발주 상태: 확인중
    (3, 3, 15, '판매중', '배송완료');  -- 하남점에 딸기 아이스크림 15개, 상품 상태: 판매중, 발주 상태: 배송완료

-- 데이터 확인
SELECT 
    s.stock_id, 
    s.branch_id, 
    s.menu_id, 
    s.order_status, 
    s.quantity, 
    s.status,
    b.branch_name,
    b.location,
    m.name as menu_name,
    m.price
FROM stock s
JOIN branch b ON s.branch_id = b.branch_id
JOIN menu m ON s.menu_id = m.menu_id
WHERE s.branch_id = 1;

